const express = require("express");
const jwt = require("jsonwebtoken");
const app = express();
app.use(express.json());

const PORT = 3000;
const SECRET_KEY = "mybanksecretkey"; // secret for signing JWT

// Hardcoded user data
const user = {
  username: "customer1",
  password: "pass123",
  balance: 5000
};

// Middleware to verify JWT
function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  if (!authHeader) return res.status(401).json({ error: "Authorization header missing" });

  const token = authHeader.split(" ")[1];
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(403).json({ error: "Invalid or expired token" });
    req.user = decoded;
    next();
  });
}

// Login Route
app.post("/login", (req, res) => {
  const { username, password } = req.body;
  if (username === user.username && password === user.password) {
    const token = jwt.sign({ username: user.username }, SECRET_KEY, { expiresIn: "1h" });
    return res.json({ message: "Login successful", token });
  }
  res.status(401).json({ error: "Invalid credentials" });
});

// Protected Route - Balance
app.get("/balance", verifyToken, (req, res) => {
  res.json({ username: user.username, balance: user.balance });
});

// Protected Route - Deposit
app.post("/deposit", verifyToken, (req, res) => {
  const { amount } = req.body;
  if (!amount || amount <= 0) return res.status(400).json({ error: "Invalid deposit amount" });

  user.balance += amount;
  res.json({ message: `Deposited ₹${amount} successfully`, newBalance: user.balance });
});

// Protected Route - Withdraw
app.post("/withdraw", verifyToken, (req, res) => {
  const { amount } = req.body;
  if (!amount || amount <= 0) return res.status(400).json({ error: "Invalid withdrawal amount" });
  if (user.balance < amount) return res.status(400).json({ error: "Insufficient balance" });

  user.balance -= amount;
  res.json({ message: `Withdrew ₹${amount} successfully`, remainingBalance: user.balance });
});

// Start Server
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
